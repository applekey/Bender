
#include <Windows.h>
// Include standard headers
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

// Include GLEW
#include <GL/glew.h>

// Include GLFW
#include <GL/glfw.h>

// Include GLM
#include <glm/glm.hpp>
using namespace glm;

//ADDITION 
#include "common.h"

//#define FLYCAP 0

#ifdef FLYCAP 0
#include "FlyCapture2.h"
using namespace FlyCapture2;
#endif

#define SHOW_FPS 1

void CalculateFrameRate()
    {

        static float framesPerSecond    = 0.0f;       // This will store our fps
        static float lastTime   = 0.0f;       // This will hold the time from the last frame
        float currentTime = GetTickCount() * 0.001f;    
        ++framesPerSecond;
        if( currentTime - lastTime > 1.0f )
        {
            lastTime = currentTime;
            if(SHOW_FPS == 1) fprintf(stderr, "\nCurrent Frames Per Second: %d\n\n", (int)framesPerSecond);
            framesPerSecond = 0;
        }
    }


GLuint loadBMP_custom(const char * imagepath){

	printf("Reading image %s\n", imagepath);

	// Data read from the header of the BMP file
	unsigned char header[54];
	unsigned int dataPos;
	unsigned int imageSize;
	unsigned int width, height;
	// Actual RGB data
	unsigned char * data;

	// Open the file
	FILE * file = fopen(imagepath,"rb");
	if (!file)							  
	{	printf("%s could not be opened. Are you in the right directory ? Don't forget to read the FAQ !\n", imagepath); return 0;}

	// Read the header, i.e. the 54 first bytes

	// If less than 54 bytes are read, problem
	if ( fread(header, 1, 54, file)!=54 ){ 
		printf("Not a correct BMP file\n");
		return 0;
	}
	// A BMP files always begins with "BM"
	if ( header[0]!='B' || header[1]!='M' ){
		printf("Not a correct BMP file\n");
		return 0;
	}
	// Make sure this is a 24bpp file
	if ( *(int*)&(header[0x1E])!=0  )         {printf("Not a correct BMP file\n");    return 0;}
	//if ( *(int*)&(header[0x1C])!=24 )         {printf("Not a correct BMP file\n");    return 0;}

	// Read the information about the image
	dataPos    = *(int*)&(header[0x0A]);
	imageSize  = *(int*)&(header[0x22]);
	width      = *(int*)&(header[0x12]);
	height     = *(int*)&(header[0x16]);

	// Some BMP files are misformatted, guess missing information
	if (imageSize==0)    imageSize=width*height*3; // 3 : one byte for each Red, Green and Blue component
	if (dataPos==0)      dataPos=54; // The BMP header is done that way

	// Create a buffer
	data = new unsigned char [imageSize];
	

	// Read the actual data from the file into the buffer
	fread(data,1,imageSize,file);

	// Everything is in memory now, the file wan be closed
	fclose (file);

	// Create one OpenGL texture
	GLuint textureID;
	glGenTextures(1, &textureID);
	
	// "Bind" the newly created texture : all future texture functions will modify this texture
	glBindTexture(GL_TEXTURE_2D, textureID);

	// Give the image to OpenGL
	glTexImage2D(GL_TEXTURE_2D, 0,GL_RGB, width, height, 0, GL_BGR, GL_UNSIGNED_BYTE, data);

	// OpenGL has now copied the data. Free our own version
	delete [] data;

	// Poor filtering, or ...
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
	//glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST); 

	// ... nice trilinear filtering.
	/*glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR); */
	//glGenerateMipmap(GL_TEXTURE_2D);

	// Return the ID of the texture we just created
	return textureID;
}

#ifdef FLYCAP 0

int ConnectCam(FlyCapture2::Camera* cam)
{
	FlyCapture2::Error error;
    FlyCapture2::PGRGuid guid;
    FlyCapture2::BusManager busMgr;
    
    //Getting the GUID of the cam
    error = busMgr.GetCameraFromIndex(0, &guid);
    if (error != FlyCapture2::PGRERROR_OK)
    {
        error.PrintErrorTrace();
        return -1;
    }

    // Connect to a camera
    error = cam->Connect(&guid);
    if (error != FlyCapture2::PGRERROR_OK)
    {
        error.PrintErrorTrace();
        return -1;
    }
}


bool FireCamTrigger(FlyCapture2::Camera* cam)
{
	const unsigned int k_softwareTrigger = 0x62C;
    const unsigned int k_fireVal = 0x80000000;
    FlyCapture2::Error error;    

    error = cam->WriteRegister( k_softwareTrigger, k_fireVal );
    if (error != FlyCapture2::PGRERROR_OK)
    {
        return false;
    }

}

#endif

//http://www.opengl.org/discussion_boards/showthread.php/174197-how-do-i-draw-2d-textures-on-screen

int main()
{
	//FLY CAP STUFF
#ifdef FLYCAP
	Camera cam;
	ConnectCam(&cam);

<<<<<<< HEAD
	int    desiredFPS = 14;//15
=======
#endif

	int    desiredFPS = 15;
>>>>>>> e97d3e13dc41965b3255ec566f4b1d9582d67e0d
	double msPerFrame = 1000 / desiredFPS;
	double frameStartTime, frameEndTime, frameDrawTime;

    //Define the width and the height of the window
    int     width=800, height=600;
    bool    running = true;
    
    glfwInit();
	glewExperimental = GL_TRUE;
	
	//glfwOpenWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);



    //Create a window with the width and the height
    //if we want it fullscreen we change GLFW_WINDOW with GLFW_FULLSCREEN
    if( !glfwOpenWindow( width, height, 0, 0, 0, 0, 0, 0, GLFW_FULLSCREEN ) )
    {
        glfwTerminate();
        return 0;
    }


	int major, minor, rev;

	glfwGetGLVersion(&major, &minor, &rev);

	fprintf(stderr, "OpenGL version recieved: %d.%d.%d", major, minor, rev);

	 if (glewInit() != GLEW_OK)
            throw("Failed to initialize GLEW\n");


	GLenum condition = GL_SYNC_GPU_COMMANDS_COMPLETE;
	GLbitfield bit =0x0;
	GLsync sync = glFenceSync(condition, bit);


    //Set the window title
    glfwSetWindowTitle("Drawing things with OpenGL");
    //reload the drawing "camera"
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    //we tell opengl that we are using the entire window to draw.
    glViewport( 0, 0, width, height );
    glOrtho(0,width,height,0,0,1);
    glDisable(GL_DEPTH_TEST);
    //get back to drawing
    glMatrixMode( GL_MODELVIEW );
    //set the background color
    glClearColor( 1.0f, 0.0f, 0.0f, 0.0f );
    //drawing loop

	glEnable(GL_TEXTURE_2D);

	GLuint * textures = new GLuint[6];
	textures[0] = loadBMP_custom(PITCH1_IMAGE1);
	textures[1] = loadBMP_custom(PITCH1_IMAGE2);
	textures[2] = loadBMP_custom(PITCH1_IMAGE3);
	textures[3] = loadBMP_custom(PITCH2_IMAGE1);
	textures[4] = loadBMP_custom(PITCH2_IMAGE2);
	textures[5] = loadBMP_custom(PITCH2_IMAGE3);

	int k = 0;
	glfwSwapInterval(1);

	//// CREATE FRAME BUFFERS AND RENDER TO THEM















	//////////////





	
    while(running)
    {
		int index = k%6;
		k++;
		frameStartTime = glfwGetTime();

        //clear to background color
        
        glClear( GL_COLOR_BUFFER_BIT );
		//glLoadIdentity();
        //here will go the drawing
        //glBegin will start the drawing of a primitive and glEnd will end it.
        //using the GL_TRIANGLES as the primitive type, the glBegin() -> glEnd() block will draw a
        //triangle for each 3 points we add.
		

		glBindTexture(GL_TEXTURE_2D, textures[index]);
		


		glBegin(GL_QUADS);
		glTexCoord2f(0.0f, 0.0f); glVertex2f(0, 0);
		glTexCoord2f(0.0f, 1.0f); glVertex2f(0, height);
		glTexCoord2f(1.0f, 1.0f); glVertex2f(width, height);
		glTexCoord2f(1.0f, 0.0f); glVertex2f(width, 0);
		glEnd();
		glFlush();
		glFinish();
		while(glClientWaitSync(sync,0,100000)!= GL_ALREADY_SIGNALED)
		{
			//just spin waiting
		}

        
		glfwSwapBuffers();

        // exit if ESC was pressed or window was closed
        running = !glfwGetKey(GLFW_KEY_ESC) && glfwGetWindowParam( GLFW_OPENED);

		//FENCE SYNC
		glFlush();
		glFinish();
		GLuint64 timeout = 1000; // 1000 ns
		while(glClientWaitSync(sync,0,timeout)!= GL_ALREADY_SIGNALED)
		{
			//just spin waiting
		}
		//glFlush(); // prevent deadlock

		// call the camera

#ifdef FLYCAP
		FireCamTrigger(&cam);
		CalculateFrameRate();
#endif

		// Lock to ~60fps
		frameEndTime = glfwGetTime();
		frameDrawTime = frameEndTime - frameStartTime;
		if (frameDrawTime < msPerFrame)
		{
			glfwSleep((msPerFrame - frameDrawTime)/1000);
		}
	}

    glfwTerminate();

    return 0;
}


